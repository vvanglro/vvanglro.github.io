<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>两大 AI Agent 平台源码分析：代码执行沙箱机制对比（Dify vs Coze）</title>
    <link href="/2025/07/28/sandbox/"/>
    <url>/2025/07/28/sandbox/</url>
    
    <content type="html"><![CDATA[<h1 id="两大-AI-Agent-平台源码分析：代码执行沙箱机制对比（Dify-vs-Coze）"><a href="#两大-AI-Agent-平台源码分析：代码执行沙箱机制对比（Dify-vs-Coze）" class="headerlink" title="两大 AI Agent 平台源码分析：代码执行沙箱机制对比（Dify vs Coze）"></a>两大 AI Agent 平台源码分析：代码执行沙箱机制对比（Dify vs Coze）</h1><h3 id="⚠️-两个版本：原文-纯手敲-和AI整理过的原文，点击查看👀"><a href="#⚠️-两个版本：原文-纯手敲-和AI整理过的原文，点击查看👀" class="headerlink" title="⚠️ 两个版本：原文(纯手敲)和AI整理过的原文，点击查看👀"></a>⚠️ 两个版本：原文(纯手敲)和AI整理过的原文，点击查看👀</h3><h2 id="Dify："><a href="#Dify：" class="headerlink" title="Dify："></a>Dify：</h2><p>Dify的设计架构里代码沙箱是放在一个单独的docker容器里执行的，这和coze有很大的区别。</p><p>这是dify代码沙箱的项目：<a href="https://github.com/langgenius/dify-sandbox">https://github.com/langgenius/dify-sandbox</a></p><hr><h3 id="Dify主服务如何调用的"><a href="#Dify主服务如何调用的" class="headerlink" title="Dify主服务如何调用的"></a>Dify主服务如何调用的</h3><p>Dify中<code>代码执行</code>作为一个内置工具来使用，在源码的&#x2F;api&#x2F;core&#x2F;tools&#x2F;builtin_tool&#x2F;providers&#x2F;code&#x2F;tools&#x2F;simple_code.py#L30路径里，<br>调用了<code>CodeExecutor.execute_code</code>方法，我们查看<code>execute_code</code>方法的代码&#x2F;api&#x2F;core&#x2F;helper&#x2F;code_executor&#x2F;code_executor.py#L60,<br>方法调用了<code>dify-sandbox</code>服务的Api接口&#x2F;v1&#x2F;sandbox&#x2F;run，到此dify主服务如何调用执行代码沙箱完毕，我们继续看<code>dify-sandbox</code>源码。</p><hr><h3 id="dify-sandbox"><a href="#dify-sandbox" class="headerlink" title="dify-sandbox"></a>dify-sandbox</h3><p>首先从路由开始&#x2F;internal&#x2F;controller&#x2F;router.go#L36，路由的执行函数为RunSandboxController，然后我们看执行函数中的<code>service.RunPython3Code</code>，<br>RunPython3Code中就是整个代码执行的核心了，主要在这段代码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">runner := python.PythonRunner&#123;&#125;<br>stdout, stderr, done, err := runner.Run(<br>    code, timeout, <span class="hljs-literal">nil</span>, preload, options,<br>)<br></code></pre></td></tr></table></figure><p>runner.Run方法中调用了InitializeEnvironment方法，这个方法做了几件事:</p><ul><li><p>使用uuid给代码文件命名</p></li><li><p>给执行代码模版文件prescript.py里的uid、gid、enable_network、preload、code赋值,源码中使用embed将prescript.py文件内容作为了sandbox_fs变量的值</p>   <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//go:embed prescript.py</span><br><span class="hljs-keyword">var</span> sandbox_fs []<span class="hljs-type">byte</span><br></code></pre></td></tr></table></figure></li><li><p>加密代码并base64后写入LIB_PATH路径中，最终方法返回代码文件的路径和b64后的加密key</p></li></ul><p>然后我们回到Run方法中，接着就是拼接cmd执行命令了，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// create a new process</span><br>cmd := exec.Command(<br>configuration.PythonPath,<br>untrusted_code_path,<br>LIB_PATH,<br>key,<br>)<br></code></pre></td></tr></table></figure><p>本质上就是 <code>python /var/sandbox/sandbox-python/tmp/$uuid.py  /var/sandbox/sandbox-python b64-key</code></p><p>我们再看下<code>prescript.py</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> ctypes<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> traceback<br><span class="hljs-comment"># setup sys.excepthook</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">excepthook</span>(<span class="hljs-params"><span class="hljs-built_in">type</span>, value, tb</span>):<br>    sys.stderr.write(<span class="hljs-string">&quot;&quot;</span>.join(traceback.format_exception(<span class="hljs-built_in">type</span>, value, tb)))<br>    sys.stderr.flush()<br>    sys.exit(-<span class="hljs-number">1</span>)<br><br>sys.excepthook = excepthook<br><br>lib = ctypes.CDLL(<span class="hljs-string">&quot;./python.so&quot;</span>)<br>lib.DifySeccomp.argtypes = [ctypes.c_uint32, ctypes.c_uint32, ctypes.c_bool]<br>lib.DifySeccomp.restype = <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># get running path</span><br>running_path = sys.argv[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> running_path:<br>    exit(-<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># get decrypt key</span><br>key = sys.argv[<span class="hljs-number">2</span>]<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> key:<br>    exit(-<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br>key = b64decode(key)<br><br>os.chdir(running_path)<br><br>&#123;&#123;preload&#125;&#125;<br><br>lib.DifySeccomp(&#123;&#123;uid&#125;&#125;, &#123;&#123;gid&#125;&#125;, &#123;&#123;enable_network&#125;&#125;)<br><br>code = b64decode(<span class="hljs-string">&quot;&#123;&#123;code&#125;&#125;&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">code, key</span>):<br>    key_len = <span class="hljs-built_in">len</span>(key)<br>    code_len = <span class="hljs-built_in">len</span>(code)<br>    code = <span class="hljs-built_in">bytearray</span>(code)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(code_len):<br>        code[i] = code[i] ^ key[i % key_len]<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(code)<br><br>code = decrypt(code, key)<br><span class="hljs-built_in">exec</span>(code)<br></code></pre></td></tr></table></figure><p>文件中主要是Seccomp比较特殊， 这也是这个项目的重点，调用文件在&#x2F;internal&#x2F;core&#x2F;lib&#x2F;python&#x2F;add_seccomp.go</p><p><strong>seccomp 是Linux 内核提供的一种安全机制，全称是Secure Computing Mode。它允许您限制进程可以使用的系统调用，从而增强系统的安全性。通过seccomp，您可以限制进程能进行的系统调用，减少系统的暴露面，防止潜在的安全风险。</strong></p><p>add_seccomp.go文件中InitSeccomp方法主要以下几点：</p><ol><li>创建一个受限的执行环境（沙盒）</li><li>限制 Python 代码可以执行的系统调用</li><li>设置适当的用户权限</li><li>防止特权提升</li></ol><p><strong>文件系统隔离</strong></p><ul><li>使用chroot 创建了一个隔离的文件系统环境，进程只能访问当前目录及其子目录<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">syscall.Chroot(<span class="hljs-string">&quot;.&quot;</span>)  <span class="hljs-comment">// 将进程限制在当前目录</span><br>syscall.Chdir(<span class="hljs-string">&quot;/&quot;</span>)   <span class="hljs-comment">// 在chroot后切换到根目录</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>权限控制</strong>    </p><ul><li>确保进程及其子进程不能获取更多权限<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">lib.SetNoNewPrivs()  <span class="hljs-comment">// 防止进程提升权限</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>系统调用过滤</strong>  </p><ul><li>使用 seccomp 机制限制进程可以执行的系统调用  </li><li>有两个列表：  <ul><li>allowed_syscalls: 完全允许的系统调用</li><li>allowed_not_kill_syscalls: 允许但不杀死进程的系统调用（即使失败也继续）<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">lib.Seccomp(allowed_syscalls, allowed_not_kill_syscalls)<br></code></pre></td></tr></table></figure></li></ul></li></ul><p><strong>用户权限设置</strong></p><ul><li>将进程权限降为指定的非特权用户<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">syscall.Setuid(uid)  <span class="hljs-comment">// 设置用户ID</span><br>syscall.Setgid(gid)  <span class="hljs-comment">// 设置组ID</span><br></code></pre></td></tr></table></figure><strong>总结一下就是dify sandbox使用了seccomp和文件隔离来保证不受信代码的运行。</strong></li></ul><hr><h2 id="Coze："><a href="#Coze：" class="headerlink" title="Coze："></a>Coze：</h2><p>Coze目前开源的代码执行就相对没那么复杂，并没有单独作为一个服务来管理，而是直接在主服务中进行，分了两种策略：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text"># Workflow Code Runner Configuration<br># Supported code runner types: sandbox / local<br># Default using local<br># - sandbox: execute python code in a sandboxed env with deno + pyodide<br># - local: using venv, no env isolation<br></code></pre></td></tr></table></figure><hr><p>核心执行代码在<a href="https://github.com/coze-dev/coze-studio/tree/main/backend/infra/impl/coderunner">https://github.com/coze-dev/coze-studio/tree/main/backend/infra/impl/coderunner</a> 目录下</p><ul><li>direct目录下为runner types为local时的策略</li><li>sandbox目录下为runner types为sandbox时的策略</li><li>script目录下为两种策略的执行代码模版文件</li></ul><p>direct里就一个runner.go，代码也很明确，直接将节点用户的代码传入进来后，和var pythonCode拼接了一下，然后就是命令行的调用执行，没有任何的安全措施。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// /backend/infra/impl/coderunner/direct/runner.go</span><br><br><span class="hljs-keyword">var</span> pythonCode = <span class="hljs-string">`</span><br><span class="hljs-string">import asyncio</span><br><span class="hljs-string">import json</span><br><span class="hljs-string">import sys</span><br><span class="hljs-string"></span><br><span class="hljs-string">class Args:</span><br><span class="hljs-string">    def __init__(self, params):</span><br><span class="hljs-string">        self.params = params</span><br><span class="hljs-string"></span><br><span class="hljs-string">class Output(dict):</span><br><span class="hljs-string">    pass</span><br><span class="hljs-string"></span><br><span class="hljs-string">%s</span><br><span class="hljs-string"></span><br><span class="hljs-string">try:</span><br><span class="hljs-string">    result = asyncio.run(main( Args(json.loads(sys.argv[1]))))</span><br><span class="hljs-string">    print(json.dumps(result))</span><br><span class="hljs-string">except Exception as  e:</span><br><span class="hljs-string">    print(f&quot;&#123;type(e).__name__&#125;: &#123;str(e)&#125;&quot;, file=sys.stderr)</span><br><span class="hljs-string">    sys.exit(1)</span><br><span class="hljs-string"></span><br><span class="hljs-string">`</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *runner)</span></span> pythonCmdRun(_ context.Context, code <span class="hljs-type">string</span>, params <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]any) (<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]any, <span class="hljs-type">error</span>) &#123;<br>bs, _ := sonic.Marshal(params)<br>cmd := exec.Command(goutil.GetPython3Path(), <span class="hljs-string">&quot;-c&quot;</span>, fmt.Sprintf(pythonCode, code), <span class="hljs-type">string</span>(bs)) <span class="hljs-comment">// ignore_security_alert RCE</span><br>stdout := <span class="hljs-built_in">new</span>(bytes.Buffer)<br>stderr := <span class="hljs-built_in">new</span>(bytes.Buffer)<br>cmd.Stdout = stdout<br>cmd.Stderr = stderr<br>err := cmd.Run()<br></code></pre></td></tr></table></figure><hr><p>script里的python_script.py貌似目前在Coze项目里没有使用到，但是也是一直运行不受信代码的方案，使用了RestrictedPython项目。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">from</span> RestrictedPython <span class="hljs-keyword">import</span> safe_builtins, limited_builtins, utility_builtins<br><span class="hljs-keyword">except</span> ModuleNotFoundError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;RestrictedPython module required, please run pip install RestrictedPython&quot;</span>,file=sys.stderr)<br>    sys.exit(<span class="hljs-number">1</span>)<br><br>custom_builtins = safe_builtins.copy()<br><br>custom_builtins[<span class="hljs-string">&#x27;__import__&#x27;</span>] = <span class="hljs-built_in">__import__</span><br>custom_builtins[<span class="hljs-string">&#x27;asyncio&#x27;</span>] = asyncio<br>custom_builtins[<span class="hljs-string">&#x27;json&#x27;</span>] = json<br>custom_builtins[<span class="hljs-string">&#x27;time&#x27;</span>] = time<br>custom_builtins[<span class="hljs-string">&#x27;random&#x27;</span>] = random<br><br>restricted_globals = &#123;<br>    <span class="hljs-string">&#x27;__builtins__&#x27;</span>: custom_builtins,<br>    <span class="hljs-string">&#x27;_utility_builtins&#x27;</span>: utility_builtins,<br>    <span class="hljs-string">&#x27;_limited_builtins&#x27;</span>: limited_builtins,<br>    <span class="hljs-string">&#x27;__name__&#x27;</span>: <span class="hljs-string">&#x27;__main__&#x27;</span>,<br>    <span class="hljs-string">&#x27;dict&#x27;</span>: <span class="hljs-built_in">dict</span>,<br>    <span class="hljs-string">&#x27;list&#x27;</span>: <span class="hljs-built_in">list</span>,<br>    <span class="hljs-string">&#x27;print&#x27;</span>: <span class="hljs-built_in">print</span>,<br>    <span class="hljs-string">&#x27;set&#x27;</span>: <span class="hljs-built_in">set</span>,<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Args</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, params</span>):<br>        self.params = params<br><br><br>DefaultCode = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">class Args:</span><br><span class="hljs-string">    def __init__(self, params):</span><br><span class="hljs-string">        self.params = params</span><br><span class="hljs-string">class Output(dict):</span><br><span class="hljs-string">    pass</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_main</span>(<span class="hljs-params">app_code, params</span>):<br>    <span class="hljs-keyword">try</span>:<br>        complete_code = DefaultCode + app_code<br>        locals_dict = &#123;<span class="hljs-string">&quot;args&quot;</span>: Args(params=params)&#125;<br>        <span class="hljs-built_in">exec</span>(complete_code, restricted_globals, locals_dict)  <span class="hljs-comment"># ignore_security_alert</span><br>        main_func = locals_dict[<span class="hljs-string">&#x27;main&#x27;</span>]<br>        ret = <span class="hljs-keyword">await</span> main_func(locals_dict[<span class="hljs-string">&#x27;args&#x27;</span>])<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">type</span>(e).__name__&#125;</span>: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>, file=sys.stderr)<br>        sys.exit(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> ret<br><br></code></pre></td></tr></table></figure><hr><p>sandbox 使用的Deno在run时安装jsr:@langchain&#x2F;<a href="mailto:&#112;&#x79;&#111;&#x64;&#105;&#x64;&#x65;&#x2d;&#115;&#97;&#x6e;&#100;&#x62;&#x6f;&#120;&#x40;&#x30;&#x2e;&#48;&#46;&#52;">&#112;&#x79;&#111;&#x64;&#105;&#x64;&#x65;&#x2d;&#115;&#97;&#x6e;&#100;&#x62;&#x6f;&#120;&#x40;&#x30;&#x2e;&#48;&#46;&#52;</a>来做的沙箱，具体代码在&#x2F;backend&#x2F;infra&#x2F;impl&#x2F;coderunner&#x2F;script&#x2F;sandbox.py,<br>这里比较特殊的就是sandbox&#x2F;runner.go里的Run方法使用了两个管道来和python进程数据交互。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// /backend/infra/impl/coderunner/sandbox/runner.go</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(runner *runner)</span></span> Run(ctx context.Context, request *coderunner.RunRequest) (*coderunner.RunResponse, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">if</span> request.Language == coderunner.JavaScript &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;js not supported yet&quot;</span>)<br>&#125;<br>b, err := json.Marshal(req&#123;<br>Config: runner.config,<br>Code:   request.Code,<br>Params: request.Params,<br>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>pr, pw, err := os.Pipe()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>r, w, err := os.Pipe()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">if</span> _, err = pw.Write(b); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">if</span> err = pw.Close(); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>cmd := exec.Command(runner.pyPath, runner.scriptPath)<br>cmd.ExtraFiles = []*os.File&#123;w, pr&#125;<br><span class="hljs-keyword">if</span> err = cmd.Start(); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">if</span> err = w.Close(); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>result := &amp;resp&#123;&#125;<br>d := json.NewDecoder(r)<br>...省略部分代码<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">cmd := exec.Command(runner.pyPath, runner.scriptPath)<br>cmd.ExtraFiles = []*os.File&#123;w, pr&#125;<br></code></pre></td></tr></table></figure><p>这里将文件描述符（fd3 fd4）传递给python子进程。</p><p>为什么是 3 和 4?<br>这与 UNIX&#x2F;Linux 下文件描述符有关：</p><ul><li>标准输入 stdin：fd&#x3D;0</li><li>标准输出 stdout：fd&#x3D;1</li><li>标准错误 stderr：fd&#x3D;2</li><li>文件描述符从 3 开始就是额外自定义的文件&#x2F;管道。</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># /backend/infra/impl/coderunner/script/sandbox.py</span><br>...省略部分代码<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    w = os.fdopen(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;wb&quot;</span>, )<br>    r = os.fdopen(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;rb&quot;</span>, )<br><br>    <span class="hljs-keyword">try</span>:<br>        req = json.load(r)<br>        user_code, params, config = req[<span class="hljs-string">&quot;code&quot;</span>], req[<span class="hljs-string">&quot;params&quot;</span>], req[<span class="hljs-string">&quot;config&quot;</span>] <span class="hljs-keyword">or</span> &#123;&#125;<br>        sandbox = Sandbox(**config)<br><br>        <span class="hljs-keyword">if</span> params <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            code = prefix + <span class="hljs-string">f&#x27;args=<span class="hljs-subst">&#123;json.dumps(params)&#125;</span>\n&#x27;</span> + user_code + suffix<br>        <span class="hljs-keyword">else</span>:<br>            code = prefix + user_code + suffix<br><br>        resp = sandbox.execute(code, **config)<br>        result = json.dumps(dataclasses.asdict(resp), ensure_ascii=<span class="hljs-literal">False</span>)<br>        w.write(<span class="hljs-built_in">str</span>.encode(result))<br>        w.flush()<br>        w.close()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sandbox exec error&quot;</span>, e)<br>        w.write(<span class="hljs-built_in">str</span>.encode(json.dumps(&#123;<span class="hljs-string">&quot;sandbox_error&quot;</span>: <span class="hljs-built_in">str</span>(e)&#125;)))<br>        w.flush()<br>        w.close()<br></code></pre></td></tr></table></figure><p>这里 os.fdopen(3, “wb”) 和 os.fdopen(4, “rb”) 的意思是：</p><p>w：打开文件描述符 3 作为二进制写入流（写给父进程&#x2F;调用者）。<br>r：打开文件描述符 4 作为二进制读取流（从父进程&#x2F;调用者读数据）。<br>后面通过 r 读取请求，通过 w 写回结果。</p><table><thead><tr><th>Go 端描述</th><th>子进程中 fd</th><th>Python 中对应的变量</th></tr></thead><tbody><tr><td><code>w</code> (Go写→Python读)</td><td><code>fd=3</code></td><td><code>w = os.fdopen(3, &quot;wb&quot;)</code></td></tr><tr><td><code>pr</code> (Python写→Go读)</td><td><code>fd=4</code></td><td><code>r = os.fdopen(4, &quot;rb&quot;)</code></td></tr></tbody></table><p>所以Coze这里每执行一个代码节点，就会产生一个python和deno进程。 高并发下会？</p><hr><p>相关沙箱项目：</p><ul><li>谷歌的容器沙箱运行时：<a href="https://github.com/google/gvisor">https://github.com/google/gvisor</a></li><li>Rust写的代码沙箱：<a href="https://github.com/microsandbox/microsandbox">https://github.com/microsandbox/microsandbox</a></li><li>限制环境：<a href="https://github.com/zopefoundation/RestrictedPython">https://github.com/zopefoundation/RestrictedPython</a></li></ul><hr><details><summary>AI整理</summary><pre><p>随着 AI Agent 平台的日益成熟，越来越多的产品提供了“代码执行”能力，使得 Agent 能以更强的自主性完成任务。然而，执行用户自定义代码也带来了安全隐患，这就必须引入“代码沙箱”机制来隔离风险。</p><p>本篇我们来深入剖析两大主流平台 —— <strong>Dify</strong> 与 <strong>Coze</strong> 的源码实现，从架构设计、安全机制、性能代价等多个角度分析它们的沙箱实现差异。</p><hr><h2 id="一、Dify-的代码执行沙箱设计"><a href="#一、Dify-的代码执行沙箱设计" class="headerlink" title="一、Dify 的代码执行沙箱设计"></a>一、Dify 的代码执行沙箱设计</h2><h3 id="独立服务架构：沙箱容器化执行"><a href="#独立服务架构：沙箱容器化执行" class="headerlink" title="独立服务架构：沙箱容器化执行"></a>独立服务架构：沙箱容器化执行</h3><p>Dify 采用了 <strong>服务解耦 + 容器化</strong> 的方式来实现代码执行沙箱功能。沙箱运行逻辑被独立为一个专门的服务：<br>👉 <a href="https://github.com/langgenius/dify-sandbox">https://github.com/langgenius/dify-sandbox</a></p><p>在 Dify 主服务中，代码执行被封装为内置工具，具体调用路径如下：</p><ul><li>调用入口：<code>/api/core/tools/builtin_tool/providers/code/tools/simple_code.py</code>  </li><li>核心方法：<code>CodeExecutor.execute_code()</code>  </li><li>实际调用：访问 <code>dify-sandbox</code> 的 <code>/v1/sandbox/run</code> 接口</li></ul><p>这一设计具备<strong>高安全性和可扩展性</strong>，尤其适合多用户环境。</p><hr><h3 id="运行流程详解"><a href="#运行流程详解" class="headerlink" title="运行流程详解"></a>运行流程详解</h3><p>从 <code>dify-sandbox</code> 源码看，核心逻辑大致如下：</p><ol><li><p>路由 <code>/v1/sandbox/run</code> 对应控制器函数 <code>RunSandboxController</code></p></li><li><p>执行函数调用 <code>service.RunPython3Code</code>，其内部通过：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">runner := python.PythonRunner&#123;&#125;<br>stdout, stderr, done, err := runner.Run(<br>    code, timeout, <span class="hljs-literal">nil</span>, preload, options,<br>)<br></code></pre></td></tr></table></figure></li><li><p>runner.Run() 中调用 InitializeEnvironment，完成如下准备：</p><ul><li>使用 uuid 命名代码文件</li><li>使用 embed 模板（prescript.py）动态插入用户代码</li><li>对代码加密并 Base64 编码，写入隔离目录</li></ul></li><li><p>拼接命令调用：</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">cmd := exec.Command(<span class="hljs-string">&quot;python&quot;</span>, code_path, lib_path, key)<br></code></pre></td></tr></table></figure><p>实质上就是运行一段带有沙箱逻辑的 Python 脚本。</p></li></ol><hr><h3 id="prescript-py：安全核心逻辑"><a href="#prescript-py：安全核心逻辑" class="headerlink" title="prescript.py：安全核心逻辑"></a>prescript.py：安全核心逻辑</h3><p><code>prescript.py</code> 是沙箱的“引导器”，内容包括:</p><ul><li>设置 <code>sys.excepthook</code> 捕获异常</li><li>使用 <code>ctypes</code> 调用编译好的 C 函数：<code>DifySeccomp(...)</code></li><li>解密用户代码后运行</li></ul><p>其中 <code>DifySeccomp</code> 来源于 Go 文件 <code>add_seccomp.go</code>，封装了 Linux 系统调用控制逻辑。</p><hr><h3 id="Seccomp-chroot-的安全防护"><a href="#Seccomp-chroot-的安全防护" class="headerlink" title="Seccomp + chroot 的安全防护"></a>Seccomp + chroot 的安全防护</h3><p>Dify 的安全实现堪称严密：</p><ul><li><p>✅ 使用 seccomp 限制系统调用</p></li><li><p>✅ 使用 chroot 文件系统隔离</p></li><li><p>✅ 降低进程权限（<code>Setuid</code>, <code>Setgid</code>）</p></li><li><p>✅ 禁止权限提升（<code>SetNoNewPrivs</code>）</p></li></ul><p>其整体设计让人想起 Google 的 gVisor，是对“不可信代码执行”极为严肃的处理。</p><hr><h2 id="二、Coze-的代码执行机制"><a href="#二、Coze-的代码执行机制" class="headerlink" title="二、Coze 的代码执行机制"></a>二、Coze 的代码执行机制</h2><h3 id="更加轻量化的实现策略"><a href="#更加轻量化的实现策略" class="headerlink" title="更加轻量化的实现策略"></a>更加轻量化的实现策略</h3><p>相较 Dify，Coze 的代码执行没有单独服务，而是内嵌在主服务中，策略支持两种模式：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text"># Supported code runner types: sandbox / local<br></code></pre></td></tr></table></figure><ul><li><p>local: 无隔离，直接使用本地 venv 环境</p></li><li><p>sandbox: 使用 Deno + Pyodide 做轻度沙箱隔离</p></li></ul><p>代码路径参考：<br>👉 <a href="https://github.com/coze-dev/coze-studio/tree/main/backend/infra/impl/coderunner">https://github.com/coze-dev/coze-studio/tree/main/backend/infra/impl/coderunner</a></p><hr><h3 id="Local-Runner：无隔离执行"><a href="#Local-Runner：无隔离执行" class="headerlink" title="Local Runner：无隔离执行"></a>Local Runner：无隔离执行</h3><p>在 direct&#x2F;runner.go 中实现了 local 模式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">cmd := exec.Command(goutil.GetPython3Path(), <span class="hljs-string">&quot;-c&quot;</span>, fmt.Sprintf(pythonCode, code), <span class="hljs-type">string</span>(bs))<br></code></pre></td></tr></table></figure><ul><li><p>用户代码拼接后直接通过 python -c 执行</p></li><li><p>无权限控制、无文件隔离、无系统调用限制</p></li><li><p>存在极大安全风险</p></li></ul><p>这种方式适合<strong>内部信任环境</strong>，但不推荐对外开放使用。</p><hr><h3 id="Script-Runner：RestrictedPython（暂未使用）"><a href="#Script-Runner：RestrictedPython（暂未使用）" class="headerlink" title="Script Runner：RestrictedPython（暂未使用）"></a>Script Runner：RestrictedPython（暂未使用）</h3><p>虽然 Coze 项目中包含了对 <a href="https://github.com/zopefoundation/RestrictedPython">RestrictedPython</a> 的集成代码（见 script&#x2F;python_script.py），但目前尚未启用。</p><ul><li><p>提供有限内置函数</p></li><li><p>只允许部分模块导入</p></li><li><p>类似浏览器沙箱的逻辑</p></li></ul><p>这部分潜力值得关注，未来可能用于更安全的轻量级沙箱策略。</p><hr><h3 id="Sandbox-Runner：Deno-Pyodide-IPC-机制"><a href="#Sandbox-Runner：Deno-Pyodide-IPC-机制" class="headerlink" title="Sandbox Runner：Deno + Pyodide + IPC 机制"></a>Sandbox Runner：Deno + Pyodide + IPC 机制</h3><p>在 <code>sandbox/runner.go</code> 中，Coze 采用了 Deno + Pyodide 的混合沙箱模型，并使用 Go 与 Python 间的双管道通信：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">cmd.ExtraFiles = []*os.File&#123;w, pr&#125;<br></code></pre></td></tr></table></figure><p>在Python子进程中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">w = os.fdopen(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;wb&quot;</span>)<br>r = os.fdopen(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;rb&quot;</span>)<br></code></pre></td></tr></table></figure><p>实现了 Go → Python 参数传递 &amp; Python → Go 结果回写 的双向数据流。</p><p>优点：</p><ul><li><p>使用 Pyodide 运行代码，避免直接触达系统资源</p></li><li><p>通过 fd 通信，不暴露敏感环境变量</p></li></ul><p>缺点：</p><ul><li><p>每次执行拉起 Python + Deno 两个进程</p></li><li><p>并发性能存在瓶颈，需额外优化</p></li></ul><hr><h2 id="三、总结与思考"><a href="#三、总结与思考" class="headerlink" title="三、总结与思考"></a>三、总结与思考</h2><table><thead><tr><th>项目</th><th>执行隔离</th><th>权限控制</th><th>性能成本</th><th>易用性</th><th>安全级别</th></tr></thead><tbody><tr><td>Dify</td><td>容器+chroot</td><td>Seccomp, Setuid</td><td>中等</td><td>中等</td><td>✅ 高</td></tr><tr><td>Coze-local</td><td>无</td><td>无</td><td>低</td><td>高</td><td>❌ 低</td></tr><tr><td>Coze-sandbox</td><td>Pyodide+Deno</td><td>js 沙箱+fd隔离</td><td>高</td><td>中</td><td>✅ 中</td></tr></tbody></table><ul><li><p>Dify 的沙箱实现适合需要强隔离、高安全的生产环境，尤其是对外提供 Agent 服务时。</p></li><li><p>Coze 的策略则更灵活，适合在轻量场景中快速运行，未来若完善 RestrictedPython 与 Deno 沙箱结合，将具备更强潜力。</p></li></ul><hr><p>🔗 推荐阅读与项目参考</p><ul><li><p><a href="https://github.com/langgenius/dify-sandbox">Dify Sandbox 项目</a></p></li><li><p><a href="https://github.com/coze-dev/coze-studio">Coze Studio 源码</a></p></li><li><p><a href="https://github.com/google/gvisor">Google gVisor</a></p></li><li><p><a href="https://github.com/zopefoundation/RestrictedPython">RestrictedPython</a></p></li></ul><p></p></pre><p></p></details>]]></content>
    
    
    
    <tags>
      
      <tag>AI Agent</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
